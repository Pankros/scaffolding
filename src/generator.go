package main

import (
	"fmt"
	"github.com/Pankros/scaffolding/src/internal/file"
	"github.com/Pankros/scaffolding/src/internal/generator"
	"github.com/Pankros/scaffolding/src/internal/utils"
	"github.com/dave/jennifer/jen"
	"go/types"
	"os"
	"regexp"
)

var structColPattern = regexp.MustCompile(`col:"([^"]+)"`)

func generate(sourceTypeName, tableName string, structType *types.Struct) error {

	// 1. Get the package of the file with go:generate comment
	goPackage := os.Getenv("GOPACKAGE")

	// 2. Start a new file in this package
	f := jen.NewFile(goPackage)

	// 3. Add a package comment, so IDEs detect files as generated
	f.PackageComment("Code generated by generator, DO NOT EDIT.")

	/*var (
		changeSetFields []jen.Code
	)*/

	// 4. Iterate over struct fields
	for i := 0; i < structType.NumFields(); i++ {
		field := structType.Field(i)

		// Generate code for each changeset field
		code := jen.Id(field.Name())
		switch v := field.Type().(type) {
		case *types.Basic:
			code.Op("*").Id(v.String())
		case *types.Named:
			typeName := v.Obj()
			// Qual automatically imports packages
			code.Op("*").Qual(
				typeName.Pkg().Path(),
				typeName.Name(),
			)
		default:
			return fmt.Errorf("struct field type not hanled: %T", v)
		}
		//	changeSetFields = append(changeSetFields, code)
	}

	fileName := utils.ToSnakeCase(sourceTypeName)

	/*generateDAO(f, daoName, modelPackage)
	generateNew(f, daoName, modelPackage)
	generateGet(f, structType, daoName, sourceTypeName, modelPackage)
	generateList(f, structType, daoName, sourceTypeName, modelPackage)
	generateCreate(f, structType, daoName, sourceTypeName, modelPackage)
	generateUpdate(f, structType, daoName, sourceTypeName, modelPackage)
	generateDelete(f, structType, daoName, sourceTypeName, modelPackage)*/
	// 7. Write generated file
	//os.Mkdir("dao", 0755)
	//return daoFile.Save("dao/" + ToSnakeCase(sourceTypeName) + ".go")

	err := file.SaveFile("dao", "dao", fileName, generator.NewDaoGenerator(sourceTypeName, tableName, structType).GetDaoFile())
	if err != nil {
		return err
	}

	err = file.SaveFile("service", "service", fileName, generator.NewServiceGenerator(sourceTypeName, structType).GetServiceFile())
	if err != nil {
		return err
	}

	err = file.SaveFile("handler", "handler", fileName, generator.NewHandlerGenerator(sourceTypeName, structType).GetHandlerFile())
	if err != nil {
		return err
	}

	return nil
}
